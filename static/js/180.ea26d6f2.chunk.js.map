{"version":3,"file":"static/js/180.ea26d6f2.chunk.js","mappings":"+TAuDA,EAlDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAW,GADK,mBAGSG,EAAAA,EAAAA,GAAUT,GAHnB,OAGRU,EAHQ,OAIdN,EAAQM,EAASP,MAJH,gDAMdQ,QAAQC,IAAR,MANc,yBAQdN,GAAW,GARG,4EAAH,qDAYfE,GACD,GAAE,CAACR,KAGF,gCACGG,EAAKU,OAAS,IACb,8BACGV,EAAKW,KAAI,SAAAC,GAAK,OACb,4BACE,gBACEC,UAAU,WACVC,IACEF,EAAMG,aAAN,6CAC0CH,EAAMG,cAC5CC,EAENC,MAAM,QACNC,IAAKN,EAAMO,QAEb,eAAGN,UAAU,OAAb,UACGD,EAAMO,KADT,KACe,kBADf,cAEcP,EAAMQ,eAbZR,EAAMS,GADH,MAoBlBrB,EAAKU,QAAU,IAAmB,IAAdR,IAAuB,6CAGjD,C,8LCnDKoB,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,oGACJD,EAAAA,EAAAA,IAAA,qCAAwCD,IADpC,cACrBf,EADqB,yBAGpBA,EAASkB,MAHW,2CAAH,qDAMbC,EAAS,mCAAG,WAAML,GAAN,uFACAE,EAAAA,EAAAA,IAAA,gBAAmBF,EAAnB,oBAAiCC,IADjC,cACjBf,EADiB,yBAGhBA,EAASkB,MAHO,2CAAH,sDAMTnB,EAAS,mCAAG,WAAMe,GAAN,uFACAE,EAAAA,EAAAA,IAAA,gBAAmBF,EAAnB,4BAAyCC,IADzC,cACjBf,EADiB,yBAGhBA,EAASkB,MAHO,2CAAH,sDAMTE,EAAY,mCAAG,WAAMN,GAAN,uFACHE,EAAAA,EAAAA,IAAA,gBAAmBF,EAAnB,4BAAyCC,IADtC,cACpBf,EADoB,yBAGnBA,EAASkB,MAHU,2CAAH,sDAMZG,EAAY,mCAAG,WAAOC,GAAP,uFACHN,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAA+CO,IAD5C,cACpBtB,EADoB,yBAGnBA,EAASkB,MAHU,2CAAH,qD","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/api';\nimport dummyCastPic from 'images/dummy-profile-pic.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetchCast(movieId);\n        setCast(response.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 && (\n        <>\n          {cast.map(actor => (\n            <div key={actor.id}>\n              <img\n                className=\"actorPic\"\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/original${actor.profile_path}`\n                    : dummyCastPic\n                }\n                width=\"200px\"\n                alt={actor.name}\n              />\n              <p className=\"text\">\n                {actor.name} <br />\n                Character: {actor.character}\n              </p>\n            </div>\n          ))}\n        </>\n      )}\n      {cast.length <= 0 && isLoading === false && <div>No cast found</div>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = '09964a9d83eee864836866e0c73a90b0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchFilm = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchByQuery = async (query) => {\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${query}`);\n\n  return response.data;\n};"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setLoading","useEffect","fetchData","fetchCast","response","console","log","length","map","actor","className","src","profile_path","dummyCastPic","width","alt","name","character","id","KEY","axios","fetchTrending","data","fetchFilm","fetchReviews","fetchByQuery","query"],"sourceRoot":""}