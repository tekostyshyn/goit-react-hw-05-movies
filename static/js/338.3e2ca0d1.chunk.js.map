{"version":3,"file":"static/js/338.3e2ca0d1.chunk.js","mappings":"mVA4FA,EAtFqB,WAAO,IAAD,IACzB,GAAwBA,EAAAA,EAAAA,UAAS,CAC/BC,eAAgB,GAChBC,aAAc,EACdC,SAAU,GACVC,OAAQ,KAJV,eAAOC,EAAP,KAAaC,EAAb,KAMQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WACpD,GAAgCd,EAAAA,EAAAA,WAAS,GAAzC,eAAOe,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,GAAW,GADK,mBAGSG,EAAAA,EAAAA,IAAUZ,GAHnB,OAGRa,EAHQ,OAIdd,EAAQc,GAJM,gDAMdC,QAAQC,IAAR,MANc,yBAQdN,GAAW,GARG,4EAAH,qDAYfE,GACD,GAAE,CAACX,KAGF,gCACGF,EAAKkB,QACJ,4BACE,UAAC,KAAD,CAAMC,UAAU,WAAWC,GAAId,EAAae,QAA5C,WACE,SAAC,MAAD,IADF,eAGA,iBAAKF,UAAU,WAAf,WACE,gBAAKA,UAAU,SAAf,UACE,gBACEG,IACEtB,EAAKuB,YAAL,6CAC0CvB,EAAKuB,aAC3CC,EAENC,IAAKzB,EAAKkB,WAGd,iBAAKC,UAAU,UAAf,WACE,eAAIA,UAAU,QAAd,SAAuBnB,EAAKkB,SAC5B,eAAGC,UAAU,OAAb,yBACeO,KAAKC,MAA0B,GAApB3B,EAAKH,cAD/B,QAGA,eAAIsB,UAAU,WAAd,uBACA,cAAGA,UAAU,OAAb,SAAqBnB,EAAKF,YAC1B,eAAIqB,UAAU,WAAd,qBACA,cAAGA,UAAU,OAAb,SACGnB,EAAKD,OAAO6B,KAAI,SAAAC,GAAK,OACpB,iBAAMV,UAAU,YAAhB,SACGU,EAAMC,MADwBD,EAAME,GADnB,aAQ5B,iBAAKZ,UAAU,aAAf,WACE,cAAGA,UAAU,WAAb,qCACA,gBAAIA,UAAU,YAAd,WACE,SAAC,KAAD,CAAMA,UAAU,WAAWC,GAAG,OAA9B,mBAGA,SAAC,KAAD,CAAMD,UAAU,WAAWC,GAAG,UAA9B,4BAKJ,SAAC,EAAAY,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,UAIJjC,EAAKkB,QAAuB,IAAdR,IACd,gBAAKS,UAAU,OAAf,mDAIP,C,8LCxFKe,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,oGACJD,EAAAA,EAAAA,IAAA,qCAAwCD,IADpC,cACrBnB,EADqB,yBAGpBA,EAASsB,MAHW,2CAAH,qDAMbvB,EAAS,mCAAG,WAAMiB,GAAN,uFACAI,EAAAA,EAAAA,IAAA,gBAAmBJ,EAAnB,oBAAiCG,IADjC,cACjBnB,EADiB,yBAGhBA,EAASsB,MAHO,2CAAH,sDAMTC,EAAS,mCAAG,WAAMP,GAAN,uFACAI,EAAAA,EAAAA,IAAA,gBAAmBJ,EAAnB,4BAAyCG,IADzC,cACjBnB,EADiB,yBAGhBA,EAASsB,MAHO,2CAAH,sDAMTE,EAAY,mCAAG,WAAMR,GAAN,uFACHI,EAAAA,EAAAA,IAAA,gBAAmBJ,EAAnB,4BAAyCG,IADtC,cACpBnB,EADoB,yBAGnBA,EAASsB,MAHU,2CAAH,sDAMZG,EAAY,mCAAG,WAAOC,GAAP,uFACHN,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAA+CO,IAD5C,cACpB1B,EADoB,yBAGnBA,EAASsB,MAHU,2CAAH,qD","sources":["pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { fetchFilm } from 'services/api';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, Link, useLocation, Outlet } from 'react-router-dom';\nimport { HiArrowNarrowLeft } from 'react-icons/hi';\nimport dummyMoviePic from 'images/dummy-image-portrait.jpg';\n\nconst MovieDetails = () => {\n  const [film, setFilm] = useState({\n    original_title: '',\n    vote_average: 0,\n    overview: '',\n    genres: [],\n  });\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetchFilm(movieId);\n        setFilm(response);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      {film.title && (\n        <div>\n          <Link className=\"backLink\" to={backLinkHref.current}>\n            <HiArrowNarrowLeft /> Go back\n          </Link>\n          <div className=\"filmInfo\">\n            <div className=\"imgBox\">\n              <img\n                src={\n                  film.poster_path\n                    ? `https://image.tmdb.org/t/p/original${film.poster_path}`\n                    : dummyMoviePic\n                }\n                alt={film.title}\n              />\n            </div>\n            <div className=\"textBox\">\n              <h2 className=\"title\">{film.title}</h2>\n              <p className=\"text\">\n                User score: {Math.floor(film.vote_average * 10)}%\n              </p>\n              <h3 className=\"subtitle\">Overview</h3>\n              <p className=\"text\">{film.overview}</p>\n              <h3 className=\"subtitle\">Genres</h3>\n              <p className=\"text\">\n                {film.genres.map(genre => (\n                  <span className=\"textGenre\" key={genre.id}>\n                    {genre.name}\n                  </span>\n                ))}\n              </p>\n            </div>\n          </div>\n          <div className=\"addInfoBox\">\n            <p className=\"subtitle\">Additional information</p>\n            <ul className=\"filmsList\">\n              <Link className=\"filmLink\" to=\"cast\">\n                Cast\n              </Link>\n              <Link className=\"filmLink\" to=\"reviews\">\n                Reviews\n              </Link>\n            </ul>\n          </div>\n          <Suspense fallback={<div>Loading page...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n      {!film.title && isLoading === false && (\n        <div className='text'>Sorry, there is no such film found.</div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '09964a9d83eee864836866e0c73a90b0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchFilm = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const fetchByQuery = async (query) => {\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${query}`);\n\n  return response.data;\n};"],"names":["useState","original_title","vote_average","overview","genres","film","setFilm","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","isLoading","setLoading","useEffect","fetchData","fetchFilm","response","console","log","title","className","to","current","src","poster_path","dummyMoviePic","alt","Math","floor","map","genre","name","id","Suspense","fallback","KEY","axios","fetchTrending","data","fetchCast","fetchReviews","fetchByQuery","query"],"sourceRoot":""}